/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package weatherforecast;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author cstuser
 */
public class weatherForecast extends javax.swing.JFrame {

    /**
     * Creates new form weatherForecast
     */
    public weatherForecast() {
        initComponents();
        imagePanelWeather.setImage("images/noimage.png");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        weatherForecastLabel = new javax.swing.JLabel();
        tempTextField = new javax.swing.JTextField();
        tempTextLabel = new javax.swing.JLabel();
        precipitationCheck = new javax.swing.JCheckBox();
        nightCheck = new javax.swing.JCheckBox();
        farenheitCheck = new javax.swing.JCheckBox();
        setIconButton = new javax.swing.JButton();
        todaysWeatherButton = new javax.swing.JButton();
        weatherLabel = new javax.swing.JLabel();
        imagePanelWeather = new weatherforecast.ImagePanel();
        menuBar = new javax.swing.JMenuBar();
        menuBarItems = new javax.swing.JMenu();
        overrideItem = new javax.swing.JMenuItem();
        quitItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        weatherForecastLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        weatherForecastLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        weatherForecastLabel.setText("Weather Forecast");

        tempTextLabel.setText("Degrees");

        precipitationCheck.setText("Precipitations?");

        nightCheck.setText("Night?");

        farenheitCheck.setText("Farenheit");

        setIconButton.setText("Set Icon");
        setIconButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setIconButtonActionPerformed(evt);
            }
        });

        todaysWeatherButton.setText("Today's weather");
        todaysWeatherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todaysWeatherButtonActionPerformed(evt);
            }
        });

        weatherLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        weatherLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        weatherLabel.setText("Select options for displaying today's weather");

        javax.swing.GroupLayout imagePanelWeatherLayout = new javax.swing.GroupLayout(imagePanelWeather);
        imagePanelWeather.setLayout(imagePanelWeatherLayout);
        imagePanelWeatherLayout.setHorizontalGroup(
            imagePanelWeatherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        imagePanelWeatherLayout.setVerticalGroup(
            imagePanelWeatherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );

        menuBarItems.setText("File");

        overrideItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        overrideItem.setText("Overide Icon");
        overrideItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overrideItemActionPerformed(evt);
            }
        });
        menuBarItems.add(overrideItem);

        quitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });
        menuBarItems.add(quitItem);

        menuBar.add(menuBarItems);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(weatherForecastLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(weatherLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(setIconButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tempTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tempTextLabel))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(nightCheck)
                                        .addComponent(precipitationCheck)
                                        .addComponent(farenheitCheck)))))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(todaysWeatherButton, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(imagePanelWeather, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(weatherForecastLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tempTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tempTextLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(precipitationCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nightCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(farenheitCheck))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(imagePanelWeather, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setIconButton)
                    .addComponent(todaysWeatherButton))
                .addGap(18, 18, 18)
                .addComponent(weatherLabel)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void overrideItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overrideItemActionPerformed
        try {
            overrideImage();
        } catch (IOException ex) {
            Logger.getLogger(weatherForecast.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_overrideItemActionPerformed

    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitItemActionPerformed

    private void setIconButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setIconButtonActionPerformed
        if (tempTextField.getText().equals("") || !isNumeric(tempTextField.getText())) {
            weatherLabel.setText("Error");
            imagePanelWeather.setImage("images/error.png");
        } else {
            try {
                weatherLabel.setText(getWeatherString());
                imagePanelWeather.setImage(WeatherImage());
            } catch (IOException ex) {
                Logger.getLogger(weatherForecast.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_setIconButtonActionPerformed

    private void todaysWeatherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todaysWeatherButtonActionPerformed
        try {
            tempTextField.setText("10");
            nightCheck.setSelected(false);
            precipitationCheck.setSelected(true);
            farenheitCheck.setSelected(false);

            imagePanelWeather.setImage(WeatherImage());
            weatherLabel.setText(getWeatherString());
        } catch (IOException ex) {
            Logger.getLogger(weatherForecast.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_todaysWeatherButtonActionPerformed

    private String getWeatherString() {
        String todayOrTonight;
        String precipitations;
        float temperatureNum;
        String temperature;

        if (nightCheck.isSelected()) {
            todayOrTonight = "Tonight";
        } else {
            todayOrTonight = "Today";
        }

        if (precipitationCheck.isSelected() && !farenheitCheck.isSelected() && Float.parseFloat(tempTextField.getText()) > 0.0) {
            precipitations = "raining";
        } else if (precipitationCheck.isSelected() && farenheitCheck.isSelected() && toFarenheit(Float.parseFloat(tempTextField.getText())) > 32.0) {
            precipitations = "raining";
        } else if (precipitationCheck.isSelected() && !farenheitCheck.isSelected() && Float.parseFloat(tempTextField.getText()) <= 0.0) {
            precipitations = "snowing";
        } else if (precipitationCheck.isSelected() && farenheitCheck.isSelected() && toFarenheit(Float.parseFloat(tempTextField.getText())) <= 32.0) {
            precipitations = "snowing";
        }else {
            precipitations = "clear sky";
        }

        if (farenheitCheck.isSelected()) {
            temperatureNum = toFarenheit(Float.parseFloat(tempTextField.getText()));
            temperature = "°F";
        } else {
            temperatureNum = Float.parseFloat(tempTextField.getText());
            temperature = "°C";
        }

        String temperatureNumString = String.format("%.2f", temperatureNum);

        return (todayOrTonight + " is " + precipitations + " with a temperature of " + temperatureNumString + temperature);

    }

    private BufferedImage WeatherImage() throws IOException {
        File image;

        if (!nightCheck.isSelected() && !precipitationCheck.isSelected()) {
            image = new File("images/clear.png");
            return ImageIO.read(image);
        } else if (!nightCheck.isSelected() && precipitationCheck.isSelected() && !farenheitCheck.isSelected() && Float.parseFloat(tempTextField.getText()) > 0.0) {
            image = new File("images/raining.png");
            return ImageIO.read(image);
        } else if (!nightCheck.isSelected() && precipitationCheck.isSelected() && farenheitCheck.isSelected() && toFarenheit(Float.parseFloat(tempTextField.getText())) > 32.0) {
            image = new File("images/raining.png");
            return ImageIO.read(image);
        } else if (!nightCheck.isSelected() && precipitationCheck.isSelected() && !farenheitCheck.isSelected() && Float.parseFloat(tempTextField.getText()) <= 0.0) {
            image = new File("images/snowing.png");
            return ImageIO.read(image);
        } else if (!nightCheck.isSelected() && precipitationCheck.isSelected() && farenheitCheck.isSelected() && toFarenheit(Float.parseFloat(tempTextField.getText())) <= 32.0) {
            image = new File("images/snowing.png");
            return ImageIO.read(image);
        }

        if (nightCheck.isSelected() && !precipitationCheck.isSelected()) {
            image = new File("images/clear_night.png");
            return ImageIO.read(image);
        } else if (nightCheck.isSelected() && precipitationCheck.isSelected() && !farenheitCheck.isSelected() && Float.parseFloat(tempTextField.getText()) > 0.0) {
            image = new File("images/raining_night.png");
            return ImageIO.read(image);
        } else if (nightCheck.isSelected() && precipitationCheck.isSelected() && farenheitCheck.isSelected() && toFarenheit(Float.parseFloat(tempTextField.getText())) > 32.0) {
            image = new File("images/raining_night.png");
            return ImageIO.read(image);
        } else if (nightCheck.isSelected() && precipitationCheck.isSelected() && !farenheitCheck.isSelected() && Float.parseFloat(tempTextField.getText()) <= 0.0) {
            image = new File("images/snowing_night.png");
            return ImageIO.read(image);
        } else if (nightCheck.isSelected() && precipitationCheck.isSelected() && farenheitCheck.isSelected() && toFarenheit(Float.parseFloat(tempTextField.getText())) <= 32.0) {
            image = new File("images/snowing_night.png");
            return ImageIO.read(image);
        }

        image = new File("images/error.png");
        return ImageIO.read(image);
    }

    private float toFarenheit(float degrees) {
        float farenheit = (float) (degrees * (9.0 / 5)) + 32;
        return farenheit;
    }

    private void overrideImage() throws IOException {
        File inputFile;
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Select an image");
        fc.setCurrentDirectory(new File("images"));
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("PNG & JPG Files", "jpg", "png");
        fc.setFileFilter(fnef);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            inputFile = fc.getSelectedFile();
            imagePanelWeather.setImage(inputFile.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }
    }

    public boolean isNumeric(String str) {
        try {
            float f = Float.parseFloat(str);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(weatherForecast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(weatherForecast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(weatherForecast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(weatherForecast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new weatherForecast().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox farenheitCheck;
    private weatherforecast.ImagePanel imagePanelWeather;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuBarItems;
    private javax.swing.JCheckBox nightCheck;
    private javax.swing.JMenuItem overrideItem;
    private javax.swing.JCheckBox precipitationCheck;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JButton setIconButton;
    private javax.swing.JTextField tempTextField;
    private javax.swing.JLabel tempTextLabel;
    private javax.swing.JButton todaysWeatherButton;
    private javax.swing.JLabel weatherForecastLabel;
    private javax.swing.JLabel weatherLabel;
    // End of variables declaration//GEN-END:variables
}
